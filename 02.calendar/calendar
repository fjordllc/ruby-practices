#!/usr/bin/env ruby
require 'date'
require 'optparse'

options = ARGV.getopts("y:", "m:")  # ARGV(argument vector)配列オブジェクト。コマンドラインに入力したデータを、スクリプトの引数として渡すことができる。

if options["y"]
  year = options["y"].to_i  # キー"y"の値を取得して変数yearへ代入
else
  year = Date.today.year
end

if options["m"]
  month = options["m"].to_i  # キー"m"の値を取得して変数monthへ代入
else
  month =  Date.today.month
end

header = "#{month}月 #{year}"  # ヘッダーの部分 「1月 2021」
header_wdays = ["日", "月", "火", "水", "木", "金", "土"]

firstday_wday = Date.new(year, month, 1).wday  # 今月1日の「曜日」取得
firstday_date = Date.new(year, month, 1).day   # 今月の「初日」を取得
lastday_date = Date.new(year, month, -1).day   # 今月の「最終日」を取得

puts header.center(20)  # center(20)の指定で「01月 2021」を中央寄せで出力。
puts header_wdays.join.(' ')  # ヘッダーの曜日を出力
print "   " * firstday_wday # 初日の前の空白  # 空白の数=半角3つ分✕今月初日の曜日の数値 #今回は今年の8/1(土)=3*「6」= 半角18個分空く事になる。

(1..lastday_date).each do |date|    # 1~最終日まで繰り返し
  print date.to_s.rjust(2) + " "    # 右寄せで表示し、その横に半角1個空白を置く。
  firstday_wday += 1 # 今月1日の曜日の数値(今回は6)に、繰り返しするごとに1を足してく。配列で[0]は日曜だがプラス1なので、[1]になる。
  if firstday_wday % 7 == 0 # a÷bで割った余り。ここでは[7]÷7だけ通過させる。 土曜日だけ通過させる。
    print "\n"
  endca
end

print "\n"    # 一番最後のプロンプト$部分を改行させる。


